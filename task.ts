/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/assets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get all assets
         * @description fetch information about all available assets
         */
        get: operations["getAssets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/prices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get asset prices
         * @description fetch list of asset prices
         */
        get: operations["getPrices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/portfolios": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of all investor positions
         * @description fetch list of positions
         */
        get: operations["getPortfolio"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Portfolio: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            asOf?: string;
            positions?: components["schemas"]["Position"][];
        };
        Position: {
            /**
             * Format: int64
             * @example 10
             */
            id?: number;
            /** Format: uuid */
            asset?: string;
            /**
             * Format: int32
             * @example 7
             */
            quantity?: number;
            /** Format: date-time */
            asOf?: string;
            /**
             * Format: int32
             * @example 7
             */
            price?: number;
        };
        Price: {
            /** Format: uuid */
            id?: string;
            /** @example APPL */
            asset?: string;
            /**
             * Format: int32
             * @example 290.32
             */
            price?: number;
        };
        Asset: {
            /** Format: uuid */
            id?: string;
            /** @example APPL */
            name?: string;
            /** @example stock|crypto|fiat */
            type?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAssets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Asset"][];
                };
            };
        };
    };
    getPrices: {
        parameters: {
            query?: {
                /** @description Asset filter */
                asset?: string;
                /** @description timestamp of the price */
                asOf?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Price"][];
                };
            };
        };
    };
    getPortfolio: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Portfolio"];
                };
            };
        };
    };
}
